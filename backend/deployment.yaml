# Create namespace if we add new "Environment"

apiVersion: v1
kind: Namespace
metadata:
  name: NAMESPACE

---  
# Create ingress for our backend

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: NAMESPACE
  name: backend-svc
  annotations:
    # use the shared ingress-nginx
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: back.alexkdevops.click
    http:
      paths:
      - path: "/"
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 8080
                         
---

#Service for backend

apiVersion: v1
kind: Service
metadata:
  namespace: NAMESPACE
  name: backend
spec: 
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
  selector:
    app: api

---

#Service for connection between POD in our cluster and RDS-database 

apiVersion: v1
kind: Service
metadata:
  namespace: NAMESPACE
  labels:
    app: mysql-service
  name: mysql-service
spec:
  externalName: versus21c.c7pmwjifbb9j.REG.rds.amazonaws.com # This one is hardcoded, there is a way to hide it in env var
  selector:
    app: mysql-service
  type: ExternalName
status:
  loadBalancer: {}

---

# Create secret to store database credentials to connect to database

apiVersion: v1
kind: Secret
metadata:
  namespace: NAMESPACE
  creationTimestamp: null
  name: credentials
data:
  database: dmVyc3VzMjFj
  host: dmVyc3VzMjFjLmM3cG13amlmYmI5ai5SRUcucmRzLmFtYXpvbmF3cy5jb20=
  password: cGFzc3dvcmQ=
  port: MzMwNg==
  user: YWRtaW4=

---  

# Backend deployment, which has to be connected to our database

apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  namespace: NAMESPACE
  labels:
    app: api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api-pod
        image: ACCT.dkr.ecr.REG.amazonaws.com/REPO:VER
        ports:
        - containerPort: 8080
        env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: credentials
              key: user
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: credentials
              key: user
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: credentials
              key: password
        - name: MYSQL_PORT
          valueFrom:
            secretKeyRef:
              name: credentials
              key: port
        - name: MYSQL_HOST
          valueFrom:
            secretKeyRef:
              name: credentials
              key: host
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: credentials
              key: database